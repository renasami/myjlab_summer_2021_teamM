user  nginx;
worker_processes  1;

pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on; #ファイルの内容可能
    tcp_nopush     on; #レスポンスヘッダとファイルの内容をまとめて送る

    keepalive_timeout  65; #タイムアウトまでの秒数
    keepalive_requests 100; #1回の接続で許可されるリクエスト数
    accept_mutex_delay 250ms; #accept()時のmutexの確保に失敗した際の待機時間 

    #gzip  on; ←多分いらないけどノブくん判断に任せる

    upstream uwsgi {
        server backend:3031;
    }

    server {
        listen 80;
        charset utf-8;

          #server_name localhost;　aws有効化させたらDocumentRoot分けてもいいかも *1

          return 301 https://$host$request_uri;

        location / {
             alias /home/www/contents/;
        }

        location /api {
            include uwsgi_params;
            uwsgi_pass uwsgi;
        }

        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }
    }

    server {
        server_tokens off;
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';


        access_log    /var/log/nginx/access.log;
        error_log     /var/log/nginx/error.log;

        listen      443;
        #server_name localhost; aws有効化させたらDocumentRoot分けてもいいかも *2

        ssl                  on;
        ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate      /etc/nginx/server.crt;
        ssl_certificate_key  /etc/nginx/server.key;

        location / {
            alias /var/www/;
        }

        location / { #なんかhistorymode使う気がしたので一応
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }
    }
}

# *1,2 参考:https://qiita.com/toshihirock/items/7c6784c5b4c52b4591b6